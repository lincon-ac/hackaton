name: Build .NET and React Native

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-dotnet:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup .NET
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: "8.0.x"

      - name: Install SonarScanner for .NET
        run: dotnet tool install --global dotnet-sonarscanner

      - name: Restore dependencies
        run: dotnet restore Time_2.sln

      - name: Begin SonarQube Analysis
        run: |
          dotnet sonarscanner begin \
            /k:"hackaton-dotnet" \
            /d:sonar.host.url="http://172.184.118.26:9000" \
            /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      - name: Build
        run: dotnet build Time_2.sln --no-restore --configuration Release

      - name: End SonarQube Analysis
        run: dotnet sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

      # Build e Push da imagem Docker do Backend
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Backend Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./DotNetApp
          push: false
          load: true
          tags: hackaton-backend:latest

      - name: Run Backend Container
        run: |
          docker run -d --name hackaton-backend -p 80:80 hackaton-backend:latest

  build-react-native:
    runs-on: ubuntu-latest

    defaults:
      run:
        working-directory: ReactNativeApp

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0 # Shallow clones should be disabled for a better relevancy of analysis

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18"
          cache: "npm"
          cache-dependency-path: ReactNativeApp/package.json

      - name: Install dependencies
        run: npm install


      - name: SonarQube Scan
        uses: sonarsource/sonarqube-scan-action@master
        with:
          projectBaseDir: ReactNativeApp
          args: >
            -Dsonar.projectKey=hackaton-react-native
            -Dsonar.sources=.
            -Dsonar.exclusions=node_modules/**,coverage/**
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: http://172.184.118.26:9000

  docker-build-run:
    runs-on: sonar
    needs: [build-dotnet, build-react-native]
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Install Docker
        run: |
          echo "Installing and configuring Docker..."
          
          # Remover qualquer instalação existente
          sudo apt-get remove -y docker docker-engine docker.io containerd runc docker-ce docker-ce-cli containerd.io || true
          sudo apt-get autoremove -y
          
          # Instalar dependências
          sudo apt-get update
          sudo apt-get install -y ca-certificates curl gnupg
          
          # Configurar repositório Docker de forma não interativa
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg
          
          # Adicionar repositório ao sources.list
          echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
          
          # Atualizar e instalar Docker
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin
          
          # Configurar Docker daemon
          echo '{
            "exec-opts": ["native.cgroupdriver=systemd"],
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "100m"
            },
            "storage-driver": "overlay2"
          }' | sudo tee /etc/docker/daemon.json
          
          # Criar diretório para socket do Docker
          sudo mkdir -p /var/run
          sudo ln -s /run/docker.sock /var/run/docker.sock || true
          
          # Iniciar e habilitar serviço
          sudo systemctl enable docker || true
          sudo systemctl daemon-reload || true
          sudo systemctl restart docker || true
          
          # Aguardar Docker iniciar (com mais tempo e verificações)
          echo "Aguardando Docker iniciar..."
          for i in {1..60}; do
            if sudo docker info >/dev/null 2>&1; then
              echo "Docker está rodando"
              sudo docker info
              break
            fi
            if [ $i -eq 60 ]; then
              echo "Timeout esperando Docker iniciar. Tentando iniciar manualmente..."
              sudo dockerd > /tmp/dockerd.log 2>&1 &
              sleep 10
            fi
            echo "Aguardando... ($i/60)"
            sleep 2
          done
          
          # Verificar status final
          echo "Status do Docker:"
          sudo systemctl status docker || true
          ls -la /var/run/docker.sock
          sudo docker version
          
      - name: Install Docker
        run: |
          echo "Installing Docker using package download..."
          
          # Remove existing Docker installations completely
          sudo apt-get remove -y docker-ce docker-ce-cli containerd.io docker docker-engine docker.io containerd runc
          sudo apt-get autoremove -y
          sudo rm -rf /var/lib/docker /var/lib/containerd
          
          # Update package lists
          sudo apt-get update
          
          # Install dependencies
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release
            
          # Add Docker's official GPG key
          sudo install -m 0755 -d /etc/apt/keyrings
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --batch --yes --dearmor -o /etc/apt/keyrings/docker.gpg
          sudo chmod a+r /etc/apt/keyrings/docker.gpg
          
          # Add Docker repository
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
            
          # Update package lists again
          sudo apt-get update
          
          # Install Docker packages
          sudo apt-get install -y --allow-downgrades \
            docker-ce \
            docker-ce-cli \
            containerd.io \
            docker-buildx-plugin \
            docker-compose-plugin
          
          # Start Docker daemon
          echo "Starting Docker daemon..."
          sudo systemctl enable docker || true
          sudo systemctl start docker || sudo dockerd > /dev/null 2>&1 &
          
          # Wait for Docker to be available
          echo "Waiting for Docker to start..."
          for i in {1..30}; do
            if sudo docker info >/dev/null 2>&1; then
              echo "Docker is running"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Docker failed to start"
              exit 1
            fi
            echo "Waiting... ($i/30)"
            sleep 2
          done
          
          # Verify installation
          sudo docker version
          sudo docker info
          echo "Docker installation completed successfully"
          
      - name: List workspace contents
        run: |
          pwd
          ls -la
          
      - name: Install Docker
        run: |
          echo "Installing Docker..."
          # Atualizar pacotes
          sudo apt-get update
          
          # Instalar dependências
          sudo apt-get install -y \
            apt-transport-https \
            ca-certificates \
            curl \
            gnupg \
            lsb-release

          # Adicionar chave GPG oficial do Docker
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /usr/share/keyrings/docker-archive-keyring.gpg

          # Configurar repositório estável
          echo \
            "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/docker-archive-keyring.gpg] https://download.docker.com/linux/ubuntu \
            $(lsb_release -cs) stable" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null

          # Instalar Docker
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io

          # Iniciar Docker
          sudo systemctl start docker
          sudo systemctl enable docker

          # Verificar instalação
          sudo docker --version
          sudo docker info

      - name: Build backend Docker image
        run: |
          # Criar diretório temporário com permissões adequadas
          TEMP_DIR="/tmp/docker-build"
          sudo rm -rf $TEMP_DIR
          sudo mkdir -p $TEMP_DIR
          sudo chown -R $(id -u):$(id -g) $TEMP_DIR
          echo "Build directory created at: $TEMP_DIR"
          
          # Copiar arquivos com preservação de permissões
          echo "Copying files to build directory..."
          cp -rp DotNetApp/* $TEMP_DIR/
          
          # Verificar permissões e conteúdo
          echo "Directory permissions:"
          ls -la $TEMP_DIR
          
          # Garantir que o Dockerfile tem permissões corretas
          chmod 644 $TEMP_DIR/Dockerfile
          
          # Mostrar conteúdo do Dockerfile
          echo "Dockerfile contents:"
          cat $TEMP_DIR/Dockerfile
          
          # Mudar para o diretório de build
          cd $TEMP_DIR
          echo "Current working directory: $(pwd)"
          
          # Verificar se o Docker daemon está rodando
          sudo systemctl status docker || sudo systemctl start docker
          
          # Construir imagem com contexto explícito
          echo "Building Docker image..."
          sudo docker build --no-cache -t hackaton-backend:latest -f $TEMP_DIR/Dockerfile $TEMP_DIR
          
          # Verificar se a imagem foi criada
          echo "Checking built image:"
          sudo docker images | grep hackaton-backend
          
          # Limpar
          cd $GITHUB_WORKSPACE
          sudo rm -rf $TEMP_DIR
          
      - name: Build frontend Docker image
        run: |
          sudo docker build -t hackaton-frontend:latest ./ReactNativeApp
      - name: Run backend container on port 80
        run: |
          sudo docker run -d --name hackaton-backend -p 80:80 hackaton-backend:latest
      - name: Run frontend container on port 81
        run: |
          sudo docker run -d --name hackaton-frontend -p 81:80 hackaton-frontend:latest
      - name: List running containers
        run: |
          sudo docker ps
